"""
FastAPI service exposing health & prediction endpoints (Phase 1).
Run with:
    uvicorn api.main:app --host 0.0.0.0 --port 8000
"""
from __future__ import annotations

import json
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Optional

from fastapi.responses import FileResponse
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from config import COINS

DATA_DIR = Path("data")
PLOT_DIR = Path("plots")


app = FastAPI(title="Crypto Volatility Watcher", version="0.1.0")

class PredictionItem(BaseModel):
    coin: str = Field(..., example="bitcoin")
    volatility_probability: float = Field(..., example=0.672312)


class PredictionResponse(BaseModel):
    prediction_date: str = Field(..., example="2025-05-04")
    most_volatile_coin: str = Field(..., example="bitcoin")
    predictions: List[PredictionItem]


@app.get("/", tags=["root"])
def read_root() -> dict[str, str]:
    """Welcome endpoint."""
    return {
        "message": "Welcome to the Crypto‑Volatility‑Watcher MVP (Phase 1). See /predict for latest prediction."
    }


@app.get("/health", tags=["health"])
def health() -> dict[str, str]:
    return {"status": "ok"}


@app.get("/predict", response_model=PredictionResponse, tags=["prediction"])
def get_prediction() -> PredictionResponse:
    today = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    today_file = DATA_DIR / f"predictions_{today}.json"

    if today_file.exists():
        with today_file.open() as fp:
            return json.load(fp)

    # Fallback: most recent prediction file
    files = sorted(DATA_DIR.glob("predictions_*.json"), reverse=True)
    if not files:
        raise HTTPException(
            status_code=404,
            detail="No predictions available. Run the prediction pipeline first.",
        )

    with files[0].open() as fp:
        return json.load(fp)
    

@app.get("/coins", tags=["meta"])
def list_coins() -> list[str]:
    """Return the current coin universe."""
    return COINS


@app.get("/plot/{coin}", tags=["plots"])
def get_plot(coin: str, period: str = "30d") -> FileResponse:
    """
    Serve a PNG generated by scripts/generate_plots.py.
    period &isin; {"1y","30d","1d"}
    """
    if coin not in COINS:
        raise HTTPException(status_code=404, detail="Unknown coin.")
    if period not in {"1y", "30d", "1d"}:
        raise HTTPException(status_code=400, detail="period must be 1y, 30d, or 1d")

    f = PLOT_DIR / f"{coin}_{period}.png"
    if not f.exists():
        raise HTTPException(
            status_code=404,
            detail="Plot not found. Run scripts/generate_plots.py first.",
        )
    return FileResponse(f, media_type="image/png")    